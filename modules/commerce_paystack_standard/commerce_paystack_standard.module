<?php

/**
 * @file
 * Implements PayStack Standard (redirect) in Drupal Commerce checkout.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_paystack_standard_commerce_payment_method_info() {
  $payment_methods['paystack_standard'] = array(
    'base' => 'commerce_paystack_standard',
    'title' => t('PayStack Standard'),
    'short_title' => t('PayStack Standard'),
    'description' => t('PayStack Standard for Drupal Commerce'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_paystack_standard_settings_form($settings = array()) {
  return commerce_paystack_settings_form($settings);
}

/**
 * Payment method callback: redirect form.
 */
function commerce_paystack_standard_redirect_form($form, &$form_state, $order, $payment_method) {
  if (empty($payment_method['settings']['secret_key']) ||
    empty($payment_method['settings']['public_key']) ||
    empty($payment_method['settings']['currency_code'])) {

    drupal_set_message(t('PayStack has not been properly configured'), 'error');
    watchdog('commerce_paystack_standard', 'Payment attempted without properly configuring PayStack');
    return array();
  }

  global $user;

  // Create a new payment transaction to represent this payment attempt.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $payment_method['settings']['currency_code'];
  $order_currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = commerce_currency_amount_to_decimal(
    commerce_currency_convert($wrapper->commerce_order_total->amount->value(), $order_currency_code, $currency_code),
    $currency_code
  );
  $transaction = commerce_payment_transaction_new(
    $payment_method['method_id'],
    $order->order_id
  );
  $transaction->instance_id = $payment_method['method_id'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->amount = $amount * 100;
  $transaction->currency_code = $currency_code;
  commerce_payment_transaction_save($transaction);

  $_SESSION['commerce_paystack_transaction_id'] = $transaction->transaction_id;

  // Initialize the payment transaction from PayStack.
  $url = 'https://api.paystack.co/transaction/initialize';
  $options = array();
  $options['method'] = 'POST';
  $options['data'] =  json_encode(array(
    'amount' => $transaction->amount,
    'email'=> $user->mail,
    'callback_url' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE))
  ));
  $options['headers'] = array(
    'authorization' => 'Bearer ' . $payment_method['settings']['secret_key'],
    'content-type' => 'application/json',
    'cache-control' => 'no-cache',
  );

  $response = drupal_http_request($url, $options);
  if (property_exists($response, 'error')) {
    drupal_set_message(t('An unexpected error occured connecting to PayStack. Please try again later'), 'error');
    watchdog('commerce_paystack_standard', 'Error initializing payment: ' . print_r($response, TRUE));
    return array();
  }

  $paystack_txn = json_decode($response->data, TRUE);

  // Save the Paystack reference. It will come in handy if the user does not
  // return as expected.
  $transaction->remote_id = $paystack_txn['data']['reference'];
  commerce_payment_transaction_save($transaction);

  // Redirect the user to PayStack using the returned authorization URL
  $form = array();
  $form['#action'] = $paystack_txn['data']['authorization_url'];

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to PayStack'),
  );

  return $form;
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_paystack_standard_redirect_form_validate($order, $payment_method) {
  // Ensure the transaction is present.
  if (!isset($_SESSION['commerce_paystack_transaction_id'])) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Payment method callback: redirect form submission.
 */
function commerce_paystack_standard_redirect_form_submit($order, $payment_method) {
  // Look up transaction from PayStack.
  $txn_ref = $_SESSION['commerce_paystack_transaction_id'];

  $txn_info = commerce_paystack_update_payment($txn_ref);
  if (!$txn_info) {
    drupal_set_message(t('There was an unexpected error looking up the your transaction details from PayStack'), 'error');
    watchdog('commerce_paystack_standard', 'Error looking up transaction ID ' . $txn_ref . ' on PayStack', array(), WATCHDOG_ALERT);

    return;
  }

  unset($_SESSION['commerce_paystack_transaction_id']);
}
